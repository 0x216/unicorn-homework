const swaggerAutogen = require("swagger-autogen")();
const swaggerUi = require("swagger-ui-express");

const generateSwaggerDocumentation = (app) => {
  const doc = {
    info: {
      title: "Smokeless API",
      description:
        "Documentation automatically generated by the <b>swagger-autogen</b> module",
    },
    host: "localhost:8000",
    basePath: "/api/v1",
    schemes: ["http", "https"],
    consumes: ["application/json"],
    produces: ["application/json"],
    securityDefinitions: {
      BearerAuth: {
        type: "apiKey",
        name: "Authorization",
        in: "header",
        description:
          "For accessing the secured endpoints, you must pass the JWT token in the 'Authorization' request header in the format: 'Bearer {token}'",
      },
    },
    tags: [
      {
        name: "User",
        description: "User Endpoints",
      },
      {
        name: "Tracking",
        description: "Tracking Endpoints",
      },
    ],
    definitions: {
      User: {
        name: "John Doe",
        email: "test@test.com",
      },
      AddUser: {
        name: "John Doe",
        email: "",
      },
      UpdatePasswordRequest: {
        type: "object",
        properties: {
          old_password: {
            type: "string",
            example: "oldPassword123!",
          },
          new_password: {
            type: "string",
            example: "newPassword123!",
          },
        },
        required: ["old_password", "new_password"],
      },
      LoginRequest: {
        type: "object",
        required: ["email", "password"],
        properties: {
          email: {
            type: "string",
            example: "user@example.com",
          },
          password: {
            type: "string",
            example: "password123",
          },
        },
      },
      LoginSuccessResponse: {
        type: "object",
        properties: {
          token: {
            type: "string",
            example:
              "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJpYXQiOjE1MTYyMzkwMjJ9.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c",
          },
        },
      },
      AddUser: {
        type: "object",
        required: ["name", "email", "password"],
        properties: {
          name: {
            type: "string",
            example: "John Doe",
          },
          email: {
            type: "string",
            example: "newuser@example.com",
          },
          password: {
            type: "string",
            example: "NewPassword123!",
          },
        },
      },
      CreateTrackingRequest: {
        type: "object",
        required: ["cigarettesPerDay", "cost"],
        properties: {
          cigarettesPerDay: {
            type: "integer",
            example: 20,
          },
          cost: {
            type: "number",
            example: 5.5,
          },
        },
      },
      TrackingResponse: {
        type: "object",
        properties: {
          id: {
            type: "integer",
            example: 12,
          },
          userId: {
            type: "integer",
            example: 1,
          },
          createdAt: {
            type: "string",
            format: "date-time",
            example: "2024-04-01T18:16:17.967Z",
          },
          updatedAt: {
            type: "string",
            format: "date-time",
            example: "2024-04-01T18:16:17.967Z",
          },
          savings: {
            type: "object",
            properties: {
              id: {
                type: "integer",
                example: 12,
              },
              cigarettesPerDay: {
                type: "integer",
                example: 5,
              },
              cost: {
                type: "number",
                example: 5,
              },
              trackingId: {
                type: "integer",
                example: 12,
              },
              createdAt: {
                type: "string",
                format: "date-time",
                example: "2024-04-01T18:16:17.973Z",
              },
              updatedAt: {
                type: "string",
                format: "date-time",
                example: "2024-04-01T18:16:17.973Z",
              },
            },
          },
        },
      },
    },
  };

  const outputFile = "./swagger-schema.json";
  const endpointsFiles = ["./src/routes/baseRoute.js"];

  swaggerAutogen(outputFile, endpointsFiles, doc).then(() => {
    const swaggerDocument = require(outputFile);
    app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerDocument));
    console.log("Swagger documentation is ready at /api-docs");
  });
};

module.exports = generateSwaggerDocumentation;
