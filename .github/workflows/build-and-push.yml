name: Build and Push Docker images

on:
  workflow_run:
    workflows: ["tests"]
    types:
      - completed
  workflow_dispatch:

jobs:
  push_to_registry:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: checkout
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
        uses: actions/checkout@v3
      - name: checkout tag
        if: ${{ github.event.inputs.version != '' && github.event.inputs.version != 'latest' }}
        uses: actions/checkout@v3
        with:
          ref: refs/tags/${]{ github.event.inputs.version }}
      - name: env variable assignment
        run: echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: Assign version
        run: |
          echo "TAG_NAME=latest" >> $GITHUB_ENV
          if [ "${{ github.event.release.tag_name }}" != "" ]; then
              echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
          fi;
          if [ "${{ github.event.inputs.version }}" != "" ]; then
              echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_ENV
          fi;
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: ghcr.io/${{ env.image_repository_name }}/backend:${{ env.TAG_NAME }}
      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: true
          tags: ghcr.io/${{ env.image_repository_name }}/frontend:${{ env.TAG_NAME }}
          build-args: |
            REACT_APP_API_URL=https://${{ secrets.HOST_DOMAIN }}/api/v1
            NODE_ENV=production

  deploy_via_ssh:
    needs: push_to_registry
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    steps:
      - name: checkout
        if: ${{ github.event.inputs.version == '' || github.event.inputs.version == 'latest' }}
        uses: actions/checkout@v3
      - name: checkout tag
        if: ${{ github.event.inputs.version != '' && github.event.inputs.version != 'latest' }}
        uses: actions/checkout@v3
        with:
          ref: refs/tags/${{ github.event.inputs.version }}
      - name: repository name fix and env
        run: |
            echo "image_repository_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
            echo "domain=${{ secrets.DEPLOY_HOST }}" >> $GITHUB_ENV
            echo "letsencrypt_email=${{ secrets.LETSENCRYPT_EMAIL }}" >> $GITHUB_ENV
            echo "TAG_NAME=latest" >> $GITHUB_ENV
            if [ "${{ github.event.release.tag_name }}" != "" ]; then
              echo "TAG_NAME=${{ github.event.release.tag_name }}" >> $GITHUB_ENV
            fi;
            if [ "${{ github.event.inputs.version }}" != "" ]; then
              echo "TAG_NAME=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            fi;
      - name: Create .env file
        run: |
              echo "Generating .env file"
    
              echo "# Autogenerated .env file" > .env
              echo "HOST_DOMAIN=${{ secrets.HOST_DOMAIN }}" >> .env
              echo "CORS_ORIGIN=http://${{ secrets.HOST_DOMAIN }}" >> .env

              echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
              echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
              echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
              echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
              
              echo "IMAGE_REPO=${{ env.image_repository_name }}" >> .env
              echo "RELEASE_VERSION=${{ env.TAG_NAME }}" >> .env
      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./docker-compose.yml,./docker-compose.prod.yml,./.env,./nginx.conf"
          target: "~/.deploy/${{ github.event.repository.name }}/"
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.REMOTE_USER }}
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          envs: APPTOKEN,USERNAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -f ./docker-compose.yml -f ./docker-compose.prod.yml pull
            docker compose -f ./docker-compose.yml -f ./docker-compose.prod.yml up -d
